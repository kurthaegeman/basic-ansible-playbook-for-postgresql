---
- hosts: all
  become: yes

  vars_files:
    - vars.yml

  vars:
    postgresql_version: "15"
    postgresql_bin_path: "/usr/lib/postgresql/{{ postgresql_version }}/bin"
    postgresql_data_dir: "/var/lib/postgresql/{{ postgresql_version }}/main"
    postgresql_psql: "{{ postgresql_bin_path }}/psql"

  pre_tasks:
    - name: "Install packages"
      apt: "name={{ item }} state=present"
      with_items:
        - postgresql-{{ postgresql_version }}
        - postgresql-client-{{ postgresql_version }}
        - python3-psycopg2

  tasks:
#    - name: "Find out if PostgreSQL is initialized"
#      ansible.builtin.stat:
#        path: "/var/lib/postgresql/15/main/pg_hba.conf"
#      register: postgres_data
#
#    - name: Empty data dir
#      ansible.builtin.file:
#        path: "{{ postgresql_data_dir }}"
#        state: absent
#      when: not postgres_data.stat.exists
#
#    - name: "Initialize PostgreSQL"
#      ansible.builtin.shell: "{{ postgresql_bin_path }}/initdb -D {{ postgresql_data_dir }}"
#      when: not postgres_data.stat.exists
#      become: true
#      become_user: postgres

    - name: "Start and enable services"
      service: "name={{ item }} state=started enabled=yes"
      with_items:
        - postgresql

    - name: "Put migration script on target"
      ansible.builtin.copy:
        src: files/migration.sql
        dest: /tmp/migration.sql
        owner: postgres
        mode: "0600"

    - name: "Create {{ db_name }} database"
      community.postgresql.postgresql_db:
        state: present
        name: "{{ db_name }}"
      become: yes
      become_user: postgres

    - name: "Populate {{ db_name }} database"
      community.postgresql.postgresql_db:
        state: restore
        name: "{{ db_name }}"
        target: /tmp/migration.sql
      become: yes
      become_user: postgres

    - name: "Create db user"
      community.postgresql.postgresql_user:
        state: present
        name: "{{ db_user }}"
        password: "{{ db_password }}"
      become: yes
      become_user: postgres

    - name: "Grant db user access to app db"
      community.postgresql.postgresql_privs:
        type: database
        database: "{{ db_name }}"
        roles: "{{ db_user }}"
        grant_option: no
        privs: all
      become: yes
      become_user: postgres

    - name: "Allow md5 connection for the db user"
      community.postgresql.postgresql_pg_hba:
        dest: "/var/lib/postgresql/15/main/pg_hba.conf"
        contype: host
        databases: all
        method: md5
        users: "{{ db_user }}"
        create: true
      become: yes
      become_user: postgres
      notify: restart postgres
 
#    - name: "Load SQL script into a variable"
#      set_fact:
#        migration_sql: "{{ lookup('file', 'migration.sql') }}"
#
#    - name: "Execute script from variable"
#      command: "{{ postgresql_psql }} {{ db_name }} -c '{{ migration_sql }}'"
#      become: yes
#      become_user: postgres
#      register: sql_response_variable

  handlers:
    - name: restart postgres
      service: name=postgresql state=restarted
